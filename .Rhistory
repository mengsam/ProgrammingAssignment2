demo()
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 +100
sqrt(z-1)
mySqrt <- sqrt(z)-1
mySqrt <- sqrt(z-1)
mySqrt
myDiv z/mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:10
15:1
?:
?`:`
seq(1:20)
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
my_seq
lenght(my_seq)
length(my_seq)
1:length(my_seq)
seq(along= my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(01,2),times=10)
rep(c(01,2),times=10)
rep(c(01,2), times=10)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
bye()
adf
tf
num_vect [tf]
swirl()
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = "")
paste(my_char, collapse = "")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Meng Sam")
my_name
paste(my_name, collapse= " ")
paste("Hello", "world!", sep= " ")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
1
swirl()
0
swirl()
library(swirl)
install_from_swirl("Data Analysis")
swirl()
nxt()
nxt()
cars
dataset$variable <- cars[[3]]
datasets$mpgCity
datasets::mpgCity
cars$mpgCity
myMPG <- datasets$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
swirl(0)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
nxt()
20
10
25
nxt()
4
sumary(cars$price)
summary(cars$price)
library(swirl)
install_from_swirl(Mathematical Biostatistics Boot Camp)
install_from_swirl("Mathematical Biostatistics Boot Camp")
swirl()
mtcars
allMPG <- mtcars$mpg
allMPG
mean(allMPG)
sampMeanMPG <- mean(allMPG)
sampVarMPG <- var(allMPG)
lenth(allMPG)
length(allMPG)
tstat <-
(sampMeanMPG - 12.0) /
| sqrt(sampVarMPG/n)
tstat <-
(sampMeanMPG - 12.0) /sqrt(sampVarMPG/n)
myDF <- n - 1
tStat
myDF
pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)
pVal < pVal1*2
pVal < pVal1 * 2
pVal <- pVal1 * 2
pVal
t.test(allMPG, my=12, alternative = "two.sided")
t.test(allMPG, mu=12.0, alternative="two.sided")
swirl()
cube <- function(x,n) {x^3}
cube
cube(3)
x <- 1:10 if (x>5) {x<-0}
x <- 1:10
x
class(x)
x <- 1:10 if (x>5) {0}
x
if (x>5) {0}
length(x)
?if
?if
?if
?if
if(x>5) {x}
for (i in 1:10) {if (i<5)}
x <- 1:10
x <- 6
if (x>5) {Yes} else {No}
if (x>5) {"Yes"} else {"No"}
f <- function(x) {g <- function (y)
{y+z} z <- 4
x + g(x)}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f
f
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h
g
f
search()
search(tools:rstudio)
search("tools:rstudio")
cube <- function(x, n) {
x^3
}
cube
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 10
x + g(x)
}
f
f(3)
x <- 5
x
get <- function() x
get
get()
n= 3
x <- matrix(runif(n^2),n)
b <- solve(x)
b
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x
function()
get()
set()
getmean()
setmean()
makeVector()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachmean(x)
cachemean(x)
a = c(1,2,3,4,5,767457,959)
makeVector(a)
cachemean(a)
b$get()
b = makeVector(a)
b$get()
b
z <- makeVector(c(1:5))
z
a$get()
z$get()
z$setmean()
z$getmean()
z
m
z$m
m()
mean(z)
class(z)
as.numeric(z)
bb <- numeric()
class(bb)
bb <- 1:5
bb
aa <- makeVector(bb)
bb
class(aa)
bb$get()
aa$get()
aa$m
cachemean(aa)
m
aa$m
x
y
get(aa)
sttmean <- function(mean)
sttmean <- function(mean) m <- mean
sttmean(5)
n= 2
x <- matrix(runif(n^2),n)
b <- solve(x)
b
solve(b)
bminus <-solve(b)
class(b)
class(bminus)
b**bminus
b%*%bminus
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$get()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
matrix(c(4,3,1,1),2,2)
testmatrix <- matrix(c(4,3,1,1),2,2)
solve(testmatrix)
testmatrixinv <- solve(testmatrix)
testmatrix%*%testmatrixinv
makeCacheMatrix(testmatrix)
aa <- makeCacheMatrix(testmatrix)
class(aa)
cacheSolve(aa)
testmatrix
x = testmatrix
cacheSolve(x)
cacheSolve(x)
x
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1,2,3,4)
xx <- makeVector(x)
xx
cachemean(xx)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
matrix(c(4,3,1,1),2,2)
x <- matrix(c(4,3,1,1),2,2)
x
xtest <- makeCacheMatrix(x)
xtest
cacheSolve(xtest)
x
x %*% cacheSolve(xtest)
n= 3
x <- matrix(runif(n^2),n)
b <- solve(x)
b
x = b
makeCacheMatrix(x)
xtest <- makeCacheMatrix(x)
cacheSolve(xtest)
x %*% cacheSolve(xtest)
makeCacheMatrix <- function(x = matrix()) {
+     m<-NULL
+     set<-function(y){
+         x<<-y
+         m<<-NULL
+     }
+     get<-function() x
+     setmatrix<-function(solve) m<<- solve
+     getmatrix<-function() m
+     list(set=set, get=get,
+          setmatrix=setmatrix,
+          getmatrix=getmatrix)
+ }
